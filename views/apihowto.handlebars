<h1>martinn6's API How-To Project</h1>
<h2>Steam's APIs</h2>

<p>
This page will be an introduction to some of Steam's API's that I find interesting. In this introduction, we 
will discuss how to implement the Steam's API and then show some API examples. It will end with combining two
APIs to form a webpage that will show you which games you own and if there are any current updates.
</p>

<h2>Steam's API Support Website</h2>
The main page for Steam's APIs can be found here: 
<a href="https://developer.valvesoftware.com/wiki/Steam_Web_API" target="_blank">
	https://developer.valvesoftware.com/wiki/Steam_Web_API
</a>

<h2>Contents:</h2>

<ul>
	<li><a href="#SetupAPIKey">Setup - How to get the API setup</a></li>
	<li><a href="#FindUserID">Setup - Find your Steam ID</a></li>
	<li>API tutorials
		<ul>
			<li><a href="#GetOwnedGames">GetOwnedGames</a></li>
			<li>GetNewsForApp</li>
		</ul>
	</li>
	<li>Final Tutorial - Updates For Your Owned Games</li>
</ul>

<section id="SetupAPIKey">
	<h2>Setup - How to get the API setup</h2>
	<h3>First Step - Creating API key</h3>
	<div>
		To use Steam's API, we need to first get an access key so our JavaScript can access it. Here are the steps needed to
		create a Steam API key:
	</div>
	<div>
		1) Goto: <a href="https://steamcommunity.com/login/home/?goto=%2Fdev%2Fapikey" target="_blank">
			https://steamcommunity.com/login/home/?goto=%2Fdev%2Fapikey
	</a>
	</div>
	<div>
		2) You will see a login screen. Login to your steam account or create a new steam user account
	</div>
	<img src="images\login.png" alt="Login Screen">
	<div>
		3) You will then have to enter in your domain name. I entered in the IP address of my server for an example. You
		will have to agree to their terms and then click on 'Register'.
	</div>
	<img src="images\registerapi.png" alt="Register Server">
	<div>
		4) You will then be presented with your API key. Mine is presented below. Make sure to copy it and save it
		to a place for reference. I like to use OneNote so its always backed up.
	</div>
	<img src="images\webapikey.png" alt="Web API Key">
	<div>
		Congratulations! You now have a web API key for Steam. 
	</div>
</section>

<section id="FindUserID">
	<h2>Setup - Find your steam ID</h2>
	<div>
		Some API's require a stream ID. Its very easy to find your stream ID. To do this, login to your stream profile
		 here: http://steamcommunity.com/. Once you are loged in, click on your profile pic in the upper right corner
		 and it will take you to your profile. Your stream ID is the long number located in the URL after profiles/. 
		 Copy it to a safe location so you can use it later. Now, we have all the things needed to start using the APIs. 
		 lets take a look at using it with one of them called 'GetOwnedGames'
	</div>
</section>

<section id="GetOwnedGames">
	<h2>GetOwnedGames API</h2>
	Utilizing what we have gathered so far, we will be able to test out the GetOwnedGames API:
	<ul>
	<li>API Key</li>
	<li>Steam UserId</li>
	</ul>
	If you dont have these yet, refer to the previous sections.<BR>
	<div>
		To use the GetOwnedGames api, all you have to do is submit a get request to the API's URL with the appropriate 
		arguments. The Arguments are as follows:
	</div>
	<h3>Arguments</h3>
		<ul>
		<li>steamid:  The SteamID of the account. </li>

		<li>include_appinfo:  Include game name and logo information in the output. 
		The default is to return appids only. </li>

		<li>include_played_free_games:  By default, free games like Team Fortress 2 are excluded (as 
			technically everyone owns them). If include_played_free_games is set, they will be returned 
			if the player has played them at some point. This is the same behavior as the games list on 
			the Steam Community. </li>

		<li>format:  Output format. json (default), xml or vdf. </li>

		<li>appids_filter:  You can optionally filter the list to a set of appids. Note that these 
		cannot be passed as a URL parameter, instead you must use the JSON format described in 
		Steam_Web_API#Calling_Service_interfaces. The expected input is an array of integers 
		(in JSON: "appids_filter: [ 440, 500, 550 ]" ) </li>
		</ul>

		An example that I would use for my login to return a jason object would be: 
		http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=8B6421C0C4A593FB05AD15FA71752C28&steamid=76561198031992079&format=json&include_appinfo=1
		
		If you typed this into a web browser, it would return a jason object simliar to this:
		<div>
		<text>
		{
		"response": {
			"game_count": 14,
			"games": [
				{
					"appid": 220,
					"name": "Half-Life 2",
					"playtime_forever": 1158,
					"img_icon_url": "fcfb366051782b8ebf2aa297f3b746395858cb62",
					"img_logo_url": "e4ad9cf1b7dc8475c1118625daf9abd4bdcbcad0",
					"has_community_visible_stats": true
				},
			...
			]
		
		}
		}
		</text>
		</div>
		To see this in an example website form, click <a href="http://52.10.4.121:3000/getownedgames?yourAPIKey=8B6421C0C4A593FB05AD15FA71752C28&valveUserID=76561198031992079&showGameInfo=on" target="_blank">here</a>.
		
	
</section>
